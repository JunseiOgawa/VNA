{"version":3,"file":"popup.js","mappingssources":["webpack://vna/./src/popup.ts","webpack://vna/webpack/before-startup","webpack://vna/webpack/startup","webpack://vna/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// filepath: d:\\programmstage\\VNA\\src\\popup.ts\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// 音声品質の設定に基づいて適切なMediaRecorderのオプションを返す\nfunction getMediaRecorderOptions(quality) {\n    // 品質に応じたビットレートを設定\n    const bitrates = {\n        low: 96000, // 96 kbps\n        medium: 128000, // 128 kbps\n        high: 256000 // 256 kbps\n    };\n    const bitrate = bitrates[quality] || bitrates.medium;\n    return {\n        mimeType: 'audio/webm; codecs=opus',\n        audioBitsPerSecond: bitrate\n    };\n}\nclass AudioRecorder {\n    constructor() {\n        Object.defineProperty(this, \"audioBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"audioUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"isRecording\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"audioQuality\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'medium'\n        }); // Keep this to pass to content script\n        Object.defineProperty(this, \"saveRecordings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"activeTabId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        // DOM elements\n        Object.defineProperty(this, \"recordButton\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"errorMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"audioPlayerContainer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"audioPlayer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.recordButton = document.getElementById('recordButton');\n        this.errorMessage = document.getElementById('errorMessage');\n        this.audioPlayerContainer = document.getElementById('audioPlayerContainer');\n        this.audioPlayer = document.getElementById('audioPlayer');\n        this.loadOptions();\n        this.setupEventListeners();\n        this.setupMessageListener();\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            if (tabs && tabs[0] && tabs[0].id) {\n                this.activeTabId = tabs[0].id;\n            }\n            else {\n                console.error(\"Could not get active tab ID.\");\n                this.showError(\"アクティブなタブが見つかりません。\");\n            }\n        });\n    }\n    loadOptions() {\n        chrome.storage.sync.get({\n            audioOptions: {\n                quality: 'medium',\n                saveRecordings: true\n            }\n        }, (result) => {\n            this.audioQuality = result.audioOptions.quality;\n            this.saveRecordings = result.audioOptions.saveRecordings;\n            console.log('設定を読み込みました:', result.audioOptions);\n        });\n    }\n    setupEventListeners() {\n        this.recordButton.addEventListener('click', () => {\n            if (!this.isRecording) {\n                this.startRecording();\n            }\n            else {\n                this.stopRecording();\n            }\n        });\n    }\n    setupMessageListener() {\n        chrome.runtime.onMessage.addListener((request /*, sender, sendResponse */) => {\n            if (request.action === 'recording-data' && request.arrayBuffer) {\n                console.log('Received recording data from content script');\n                this.audioBlob = new Blob([request.arrayBuffer], { type: request.type || 'audio/webm' });\n                this.audioUrl = URL.createObjectURL(this.audioBlob);\n                this.isRecording = false;\n                this.updateUI(false);\n                this.displayAudio();\n                if (this.saveRecordings && this.audioBlob) {\n                    this.saveRecording();\n                }\n            }\n            else if (request.action === 'content_script_error') {\n                console.error('Error from content script:', request.errorName, request.errorMessage);\n                this.showError(`録音エラー: ${request.errorName || ''} - ${request.errorMessage || '不明なエラー'}`);\n                this.isRecording = false;\n                this.updateUI(false);\n            }\n            else if (request.action === 'recording_started_content') {\n                console.log('Content script confirmed recording started');\n                this.isRecording = true;\n                this.updateUI(true);\n                this.hideError();\n            }\n        });\n    }\n    startRecording() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.isRecording) {\n                console.warn('すでに録音中です');\n                return;\n            }\n            if (!this.activeTabId) {\n                this.showError(\"アクティブなタブが見つかりません。ページをリロードして再度お試しください。\");\n                return;\n            }\n            console.log('ポップアップから録音開始を要求します...');\n            this.hideError();\n            // マイクの権限状態を事前に確認 (これはポップアップのコンテキストでの確認)\n            if (navigator.permissions) {\n                try {\n                    const perm = yield navigator.permissions.query({ name: 'microphone' });\n                    if (perm.state === 'denied') {\n                        this.showError('マイクの権限がブラウザ設定で拒否されています。サイト設定を確認してください。');\n                        return;\n                    }\n                    // 'prompt' or 'granted' are okay to proceed to content script\n                }\n                catch (permError) {\n                    console.warn('Permission API query failed:', permError);\n                    // Proceed, content script will handle actual getUserMedia permission\n                }\n            }\n            const recorderOptions = getMediaRecorderOptions(this.audioQuality);\n            chrome.tabs.sendMessage(this.activeTabId, { action: 'start-record', recorderOptions: recorderOptions }, (response) => {\n                if (chrome.runtime.lastError) {\n                    console.error('録音開始メッセージ送信エラー:', chrome.runtime.lastError.message);\n                    // Common error: \"Could not establish connection. Receiving end does not exist.\"\n                    // This means content script is not injected or not listening on that page.\n                    let specificMessage = 'コンテンツスクリプトと通信できませんでした。ページをリロードするか、拡張機能が現在のページで動作可能か確認してください。';\n                    if (chrome.runtime.lastError.message && chrome.runtime.lastError.message.includes(\"Receiving end does not exist\")) {\n                        specificMessage = '録音機能が現在のページで利用できません。ページを更新するか、別のタブでお試しください。';\n                    }\n                    else if (chrome.runtime.lastError.message) {\n                        specificMessage = `通信エラー: ${chrome.runtime.lastError.message}`;\n                    }\n                    this.showError(specificMessage);\n                    this.isRecording = false;\n                    this.updateUI(false);\n                    return;\n                }\n                // Response from content script's sendResponse for the tab message\n                if (response) {\n                    if (response.status === 'error') {\n                        console.error('コンテンツスクリプトでの録音開始エラー (同期応答):', response.errorName, response.errorMessage);\n                        this.showError(`録音開始エラー: ${response.errorName || ''} - ${response.errorMessage || '不明なエラー'}`);\n                        this.isRecording = false;\n                        this.updateUI(false);\n                    }\n                    else if (response.status === 'success_sent_to_runtime') {\n                        // This means content script acknowledged and will send async status via runtime.onMessage\n                        console.log('Content script acknowledged start-record, waiting for recording_started_content message.');\n                    }\n                }\n                else {\n                    // No response might mean content script will handle via runtime.sendMessage, or an issue.\n                    console.warn(\"start-record message sent, but no synchronous response from content script. Waiting for async status.\");\n                }\n            });\n        });\n    }\n    stopRecording() {\n        if (!this.isRecording) {\n            console.warn('録音が開始されていません');\n            return;\n        }\n        if (!this.activeTabId) {\n            this.showError(\"アクティブなタブが見つかりません。\");\n            return;\n        }\n        console.log('ポップアップから録音停止を要求します...');\n        chrome.tabs.sendMessage(this.activeTabId, { action: 'stop-record' }, (response) => {\n            if (chrome.runtime.lastError) {\n                console.error('録音停止メッセージ送信エラー:', chrome.runtime.lastError.message);\n                this.showError(`録音停止に失敗: ${chrome.runtime.lastError.message}`);\n                // Don't reset UI here, rely on content script message or timeout\n                return;\n            }\n            if (response && response.status === 'error') {\n                console.error('コンテンツスクリプトでの録音停止エラー (同期応答):', response.errorName, response.errorMessage);\n                this.showError(`録音停止エラー: ${response.errorName || ''} - ${response.errorMessage || '不明なエラー'}`);\n            }\n            else if (response && response.status === 'success') {\n                console.log('Content script acknowledged stop-record.');\n                // Actual stop and data sending is async via runtime message\n            }\n        });\n    }\n    saveRecording() {\n        if (!this.audioBlob)\n            return;\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const filename = `recording-${timestamp}.webm`;\n        chrome.storage.local.get({ recordings: [] }, (result) => {\n            const recordings = result.recordings;\n            recordings.push({\n                filename: filename,\n                timestamp: new Date().toISOString(),\n                // duration: 0 // Placeholder\n            });\n            chrome.storage.local.set({ recordings: recordings });\n        });\n        const downloadLink = document.createElement('a');\n        downloadLink.href = this.audioUrl;\n        downloadLink.download = filename;\n        downloadLink.textContent = '録音をダウンロード';\n        downloadLink.className = 'download-link';\n        downloadLink.style.display = 'block';\n        downloadLink.style.marginTop = '10px';\n        downloadLink.style.textAlign = 'center';\n        // Clear previous download links\n        const existingLinks = this.audioPlayerContainer.querySelectorAll('.download-link');\n        existingLinks.forEach(link => link.remove());\n        this.audioPlayerContainer.appendChild(downloadLink);\n    }\n    updateUI(isRecording) {\n        this.recordButton.textContent = isRecording ? '録音停止' : '録音開始';\n        this.recordButton.className = isRecording ? 'stop-button' : 'record-button';\n        if (isRecording) {\n            this.hideError();\n        }\n    }\n    displayAudio() {\n        if (this.audioUrl) {\n            this.audioPlayer.src = this.audioUrl;\n            this.audioPlayerContainer.style.display = 'block';\n        }\n        else {\n            this.audioPlayerContainer.style.display = 'none';\n        }\n    }\n    showError(message) {\n        this.errorMessage.textContent = message;\n        this.errorMessage.style.display = 'block';\n    }\n    hideError() {\n        this.errorMessage.textContent = '';\n        this.errorMessage.style.display = 'none';\n    }\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AudioRecorder();\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/popup.ts\"]();\n",""],"names":[],"sourceRoot":""}