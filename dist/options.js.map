{"version":3,"file":"options.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AEpGA;AACA;AACA;AACA;AACA","sources":["webpack://vna/./src/options.ts","webpack://vna/webpack/before-startup","webpack://vna/webpack/startup","webpack://vna/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// filepath: d:\\programmstage\\VNA\\src\\options.ts\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass OptionsManager {\n    constructor() {\n        Object.defineProperty(this, \"audioQualitySelect\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"saveAudioCheckbox\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"saveButton\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"statusMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.audioQualitySelect = document.getElementById('audioQuality');\n        this.saveAudioCheckbox = document.getElementById('saveAudio');\n        this.saveButton = document.getElementById('saveButton');\n        this.statusMessage = document.getElementById('statusMessage');\n        this.setupEventListeners();\n        this.loadOptions();\n    }\n    setupEventListeners() {\n        this.saveButton.addEventListener('click', () => this.saveOptions());\n    }\n    loadOptions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // chrome.storage.sync から設定を読み込み\n                chrome.storage.sync.get({\n                    audioOptions: {\n                        quality: 'medium',\n                        saveRecordings: true\n                    }\n                }, (result) => {\n                    const options = result.audioOptions;\n                    // UI に反映\n                    this.audioQualitySelect.value = options.quality;\n                    this.saveAudioCheckbox.checked = options.saveRecordings;\n                });\n            }\n            catch (error) {\n                console.error('設定の読み込み中にエラーが発生しました:', error);\n                this.showStatus('設定の読み込みに失敗しました', 'error');\n            }\n        });\n    }\n    saveOptions() {\n        try {\n            const options = {\n                quality: this.audioQualitySelect.value,\n                saveRecordings: this.saveAudioCheckbox.checked\n            };\n            // chrome.storage.sync に設定を保存\n            chrome.storage.sync.set({\n                audioOptions: options\n            }, () => {\n                this.showStatus('設定を保存しました', 'success');\n            });\n        }\n        catch (error) {\n            console.error('設定の保存中にエラーが発生しました:', error);\n            this.showStatus('設定の保存に失敗しました', 'error');\n        }\n    }\n    showStatus(message, type) {\n        this.statusMessage.textContent = message;\n        this.statusMessage.className = type;\n        // 3秒後にメッセージを消す\n        setTimeout(() => {\n            this.statusMessage.textContent = '';\n            this.statusMessage.className = '';\n        }, 3000);\n    }\n}\n// DOMContentLoaded イベントで初期化\ndocument.addEventListener('DOMContentLoaded', () => {\n    new OptionsManager();\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/options.ts\"]();\n",""],"names":[],"sourceRoot":""}